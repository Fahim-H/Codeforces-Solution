//https://codeforces.com/problemset/problem/1352/C



#include<bits/stdc++.h>
using namespace std;

#define endl '\n'
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define MOD 1e9+7
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef long long int ll;
typedef tree< ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update > ordered_set;
/// cout<<*X.find_by_order(1)<<endl; // finds the kth element
/// cout<<X.order_of_key(-5)<<endl;  // number of items in a set that are strictly smaller than our item
const int mx = 1e9+10;
vector <ll> vec;
int main(){
    optimize();

    int t; cin>>t;
    while(t--){
        ll n,k; cin>>n>>k;
        ll lb = 1, rb = k*2;
        int ans;

        while(lb <= rb){
            int mid = (lb+rb) / 2;
            int nwm = mid - (mid / n); //nums without multiples
            if(nwm > k)rb = mid-1;
            else if(nwm < k)lb = mid+1;
            else{
                ans = mid;
                rb = mid-1;
            }
        }
        cout<<ans<<endl;
    }
    return 0;
}
